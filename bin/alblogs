#!/usr/bin/env ruby

require 'optparse'
require 'time'
require 'shellwords'
require 'json'
require 'alblogs'

started_at = Time.now.utc

options = {
  start_time: Alblogs::Utils.time_ago(started_at, '30 min'),
  end_time: started_at,
  include_filter: nil,
  exclude_filter: nil,
  alb_s3_bucket: nil,
  aws_profile: nil,
  log_file: $stdout,
  display_stats: false,
  request_times_over: nil
}
OptionParser.new do |opts|
  opts.banner = "Usage: alblogs [options]"

  opts.on("-s", "--start=TIME_EXP", "Start time") do |v|
    options[:start_time] = Alblogs::Utils.time_ago(started_at, v)
  end

  opts.on("-e", "--end=TIME_EXP", "End time") do |v|
    options[:end_time] = Alblogs::Utils.time_ago(started_at, v)
  end

  opts.on("--include=REGEX", "Include filter") do |v|
    options[:include_filter] = Regexp.new(v)
  end

  opts.on("--exclude=REGEX", "Exclude filter") do |v|
    options[:exclude_filter] = Regexp.new(v)
  end

  opts.on("-p", "--profile=PROFILE", "AWS profile") do |v|
    options[:aws_profile] = v
  end

  opts.on("-b", "--bucket=ALB_S3_BUCKET", "ALB S3 Bucket and Path") do |v|
    options[:alb_s3_bucket] = v
  end

  opts.on('-o', "--output=OUTPUT_FILE", 'File to stream matching ALB log entries to') do |v|
    f = File.open(v, 'wb')
    f.sync = true
    options[:log_file] = f
  end

  opts.on("--stats", "Display Stats") do
    options[:display_stats] = true
  end

  opts.on('--request-times-over=SECONDS', 'Find requests that took over X seconds') do |v|
    options[:request_times_over] = v.to_f
  end
end.parse!

raise("no bucket specified") unless options[:alb_s3_bucket]

# just forgive the user and swap the values
if options[:end_time] && options[:end_time] < options[:start_time]
  $stderr.puts 'swapping start/end times'
  options[:start_time], options[:end_time] = options[:end_time], options[:start_time]
end

request_matcher = Alblogs::RequestMatcher.new options
s3_bucket = Alblogs::S3Bucket.new(options[:alb_s3_bucket], options[:aws_profile])

iterator = Alblogs::Iterator.new(s3_bucket, request_matcher.range, request_matcher)
iterator.display_stats_proc = Proc.new do |stats|
  stats[:elapsed_time] = Time.now.utc - stats[:started_at]
  $stderr.puts stats.inspect
end

trap("INT") { iterator.stop! }

iterator.each do |entry|
  options[:log_file].puts entry.line
end

options[:log_file].close
